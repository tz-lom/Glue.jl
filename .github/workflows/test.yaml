name: Run tests

on:
  push:
    branches:
      - master
  pull_request:

# needed to allow julia-actions/cache to delete old caches that it has created
permissions:
  actions: write
  contents: read

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        julia-version: ['lts', '1', 'pre']
        julia-arch: [x64, x86]
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.julia-version }}
          arch: ${{ matrix.julia-arch }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1.10.0
        with:
          # Value determining which bounds checking setting to use. Options: yes | no | auto. Default value: yes.
          check_bounds: yes # optional, default is yes
          # Value determining whether to test with coverage or not. Options: true | false. Default value: true.
          coverage: true # optional, default is true
          # Value passed to the --depwarn flag. Options: yes | no | error. Default value: yes.
          depwarn: error # optional, default is yes
          # If true, then, for each [compat] entry in the active project, only allow the latest compatible version. If the value is auto and the pull request has been opened by Dependabot or CompatHelper, then force_latest_compatible_version will be set to true, otherwise it will be set to false. Options: true | false | auto. Default value: auto.
          force_latest_compatible_version: auto # optional, default is auto
          # Value passed to the --inline flag. Options: yes | no. Default value: yes.
          inline: yes # optional, default is yes
          # Value inserted in front of the julia command, e.g. for running xvfb-run julia [...]
          prefix: # optional, default is 
          # Value passed to the --project flag. The default value is the repository root: "@."
          project: # optional, default is @.
          # Whether or not to attempt to create GitHub annotations to show test failures inline. Only effective on Julia 1.8+.
          annotate: true # optional, default is false
          # Whether to run tests with `compiled-modules`. For possible values, refer to https://docs.julialang.org/en/v1/manual/command-line-interface/#command-line-interface
          compiled_modules: yes # optional, default is yes
          # Whether to allow re-resolving of package versions in the test environment. Only effective on Julia 1.9+. Options: true | false. Default value: true
          allow_reresolve: true # optional, default is true